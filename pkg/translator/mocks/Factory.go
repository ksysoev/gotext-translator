// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	translator "github.com/ksysoev/gotext-translator/pkg/translator"
	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// CreateTranslator provides a mock function with given fields: providerName, config
func (_m *Factory) CreateTranslator(providerName string, config map[string]interface{}) (translator.Translator, error) {
	ret := _m.Called(providerName, config)

	if len(ret) == 0 {
		panic("no return value specified for CreateTranslator")
	}

	var r0 translator.Translator
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (translator.Translator, error)); ok {
		return rf(providerName, config)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) translator.Translator); ok {
		r0 = rf(providerName, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(translator.Translator)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(providerName, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviders provides a mock function with no fields
func (_m *Factory) GetProviders() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProviders")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// RegisterProvider provides a mock function with given fields: provider
func (_m *Factory) RegisterProvider(provider translator.Provider) error {
	ret := _m.Called(provider)

	if len(ret) == 0 {
		panic("no return value specified for RegisterProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(translator.Provider) error); ok {
		r0 = rf(provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
